package org.khasanof.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class GiftAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGiftAllPropertiesEquals(Gift expected, Gift actual) {
        assertGiftAutoGeneratedPropertiesEquals(expected, actual);
        assertGiftAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGiftAllUpdatablePropertiesEquals(Gift expected, Gift actual) {
        assertGiftUpdatableFieldsEquals(expected, actual);
        assertGiftUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGiftAutoGeneratedPropertiesEquals(Gift expected, Gift actual) {
        assertThat(expected)
            .as("Verify Gift auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGiftUpdatableFieldsEquals(Gift expected, Gift actual) {
        assertThat(expected)
            .as("Verify Gift relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getVisibility()).as("check visibility").isEqualTo(actual.getVisibility()))
            .satisfies(e -> assertThat(e.getLevel()).as("check level").isEqualTo(actual.getLevel()))
            .satisfies(e -> assertThat(e.getStock()).as("check stock").isEqualTo(actual.getStock()))
            .satisfies(e -> assertThat(e.getUnlimitedStock()).as("check unlimitedStock").isEqualTo(actual.getUnlimitedStock()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGiftUpdatableRelationshipsEquals(Gift expected, Gift actual) {
        assertThat(expected)
            .as("Verify Gift relationships")
            .satisfies(e -> assertThat(e.getProducts()).as("check products").isEqualTo(actual.getProducts()));
    }
}
